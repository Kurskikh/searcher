"""
GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ø–æ–∏—Å–∫–∞ —Å –≥–∏–±—Ä–∏–¥–Ω–æ–π CPU/GPU –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CUDA –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
"""

import os
import re
import mmap
from typing import List, Optional, Tuple
from dataclasses import dataclass
import numpy as np

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU –±–∏–±–ª–∏–æ—Ç–µ–∫
GPU_AVAILABLE = False
USE_CUPY = False
USE_NUMBA = False

try:
    import cupy as cp
    USE_CUPY = True
    GPU_AVAILABLE = True
    print("‚úÖ CuPy –¥–æ—Å—Ç—É–ø–µ–Ω - GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!")
except ImportError:
    print("‚ö†Ô∏è CuPy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ CPU")

try:
    from numba import cuda
    if cuda.is_available():
        USE_NUMBA = True
        GPU_AVAILABLE = True
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ - GPU: {cuda.get_current_device().name.decode()}")
except ImportError:
    print("‚ö†Ô∏è Numba CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")


@dataclass
class GPUSearchConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GPU –ø–æ–∏—Å–∫–∞"""
    batch_size: int = 64 * 1024 * 1024  # 64 –ú–ë –±–∞—Ç—á–∏
    min_file_size_for_gpu: int = 1024 * 1024  # 1 –ú–ë –º–∏–Ω–∏–º—É–º –¥–ª—è GPU
    max_pattern_complexity: int = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å regex –¥–ª—è GPU
    use_gpu: bool = GPU_AVAILABLE
    threads_per_block: int = 256
    

class GPUPatternMatcher:
    """GPU-—É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def __init__(self, config: GPUSearchConfig = None):
        self.config = config or GPUSearchConfig()
        self.gpu_available = GPU_AVAILABLE and self.config.use_gpu
        
        if self.gpu_available:
            self._init_gpu()
    
    def _init_gpu(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GPU"""
        if USE_NUMBA:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
                device = cuda.get_current_device()
                self.gpu_name = device.name.decode()
                self.gpu_compute_capability = device.compute_capability
                print(f"üöÄ GPU –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.gpu_name}")
                print(f"   Compute Capability: {self.gpu_compute_capability}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GPU: {e}")
                self.gpu_available = False
    
    def is_pattern_gpu_friendly(self, pattern: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è GPU
        
        GPU-friendly –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
        - –õ–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        - –ü—Ä–æ—Å—Ç—ã–µ –∫–ª–∞—Å—Å—ã —Å–∏–º–≤–æ–ª–æ–≤ [abc]
        - –ö–≤–∞–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã *, +, ?
        - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã |
        
        –ù–ï GPU-friendly:
        - Backreferences \\1, \\2
        - Lookahead/lookbehind (?=...) (?!...)
        - –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        - –£—Å–ª–æ–≤–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if any(x in pattern for x in [r'\1', r'\2', '(?=', '(?!', '(?<', '(?(', r'\g<']):
            return False
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
        complexity = (
            pattern.count('(') + 
            pattern.count('[') + 
            pattern.count('{') +
            pattern.count('\\') // 2
        )
        
        return complexity <= self.config.max_pattern_complexity
    
    def search_in_text_gpu(self, text: bytes, pattern: re.Pattern) -> bool:
        """
        –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∞ GPU
        
        Args:
            text: –¢–µ–∫—Å—Ç –≤ –±–∞–π—Ç–∞—Ö
            pattern: –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –ø–∞—Ç—Ç–µ—Ä–Ω
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        """
        if not self.gpu_available or len(text) < self.config.min_file_size_for_gpu:
            # Fallback –Ω–∞ CPU –¥–ª—è –º–µ–ª–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
            return self._search_cpu(text, pattern)
        
        pattern_str = pattern.pattern
        
        if not self.is_pattern_gpu_friendly(pattern_str):
            # –°–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ CPU
            return self._search_cpu(text, pattern)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞ GPU
            if USE_CUPY:
                return self._search_cupy(text, pattern)
            elif USE_NUMBA:
                return self._search_numba(text, pattern)
            else:
                return self._search_cpu(text, pattern)
        except Exception as e:
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ fallback –Ω–∞ CPU
            print(f"‚ö†Ô∏è GPU search failed, fallback to CPU: {e}")
            return self._search_cpu(text, pattern)
    
    def _search_cpu(self, text: bytes, pattern: re.Pattern) -> bool:
        """Fallback –ø–æ–∏—Å–∫ –Ω–∞ CPU"""
        try:
            text_str = text.decode('utf-8', errors='ignore')
            return bool(pattern.search(text_str))
        except Exception:
            return False
    
    def _search_cupy(self, text: bytes, pattern: re.Pattern) -> bool:
        """
        –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CuPy
        –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            text_str = text.decode('utf-8', errors='ignore')
            
            # –î–ª—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (–ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
            pattern_str = pattern.pattern
            
            if self._is_literal_pattern(pattern_str):
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–∞ GPU
                return self._literal_search_gpu(text_str, pattern_str)
            else:
                # –î–ª—è regex –∏—Å–ø–æ–ª—å–∑—É–µ–º batch –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ CPU —Å numpy
                # (cuDF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç regex –Ω–∞ Windows —Ö–æ—Ä–æ—à–æ)
                return self._search_cpu(text, pattern)
                
        except Exception as e:
            return self._search_cpu(text, pattern)
    
    def _is_literal_pattern(self, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –ª–∏—Ç–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π"""
        special_chars = r'.*+?[]{}()^$|\\'
        return not any(c in pattern for c in special_chars)
    
    def _literal_search_gpu(self, text: str, substring: str) -> bool:
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –Ω–∞ GPU
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CuPy –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤
            text_array = np.frombuffer(text.encode('utf-8'), dtype=np.uint8)
            pattern_array = np.frombuffer(substring.encode('utf-8'), dtype=np.uint8)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ GPU
            text_gpu = cp.asarray(text_array)
            pattern_gpu = cp.asarray(pattern_array)
            
            pattern_len = len(pattern_array)
            text_len = len(text_array)
            
            if pattern_len > text_len:
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –Ω–∞ GPU
            # –≠—Ç–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            num_positions = text_len - pattern_len + 1
            
            # –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
            batch_size = 10_000_000  # 10M –ø–æ–∑–∏—Ü–∏–π –∑–∞ —Ä–∞–∑
            
            for start_pos in range(0, num_positions, batch_size):
                end_pos = min(start_pos + batch_size, num_positions)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—Ç—á –ø–æ–∑–∏—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                found = self._check_positions_batch(
                    text_gpu, pattern_gpu, start_pos, end_pos, pattern_len
                )
                
                if found:
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è GPU literal search error: {e}")
            return substring in text
    
    def _check_positions_batch(self, text_gpu, pattern_gpu, start_pos, end_pos, pattern_len):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞—Ç—á –ø–æ–∑–∏—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –Ω–∞ GPU"""
        try:
            # –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for i in range(start_pos, end_pos):
                window = text_gpu[i:i+pattern_len]
                if len(window) == pattern_len:
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ GPU
                    if cp.all(window == pattern_gpu):
                        return True
            return False
        except Exception:
            return False
    
    def _search_numba(self, text: bytes, pattern: re.Pattern) -> bool:
        """
        –ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Numba CUDA
        –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ CUDA —è–¥—Ä–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        try:
            text_str = text.decode('utf-8', errors='ignore')
            pattern_str = pattern.pattern
            
            if self._is_literal_pattern(pattern_str):
                return self._literal_search_numba(text_str, pattern_str)
            else:
                # –°–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞ CPU
                return self._search_cpu(text, pattern)
                
        except Exception:
            return self._search_cpu(text, pattern)
    
    def _literal_search_numba(self, text: str, substring: str) -> bool:
        """–ü–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è Numba CUDA"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤—ã
            text_array = np.frombuffer(text.encode('utf-8'), dtype=np.uint8)
            pattern_array = np.frombuffer(substring.encode('utf-8'), dtype=np.uint8)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º CUDA —è–¥—Ä–æ
            found = self._run_cuda_kernel(text_array, pattern_array)
            return found
            
        except Exception as e:
            print(f"‚ö†Ô∏è Numba CUDA search error: {e}")
            return substring in text
    
    def _run_cuda_kernel(self, text: np.ndarray, pattern: np.ndarray) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç CUDA —è–¥—Ä–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        if not USE_NUMBA:
            return False
        
        try:
            text_len = len(text)
            pattern_len = len(pattern)
            
            if pattern_len > text_len:
                return False
            
            num_positions = text_len - pattern_len + 1
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ CPU
            result = np.zeros(1, dtype=np.int32)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ GPU
            d_text = cuda.to_device(text)
            d_pattern = cuda.to_device(pattern)
            d_result = cuda.to_device(result)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–æ–≤ –∏ –ø–æ—Ç–æ–∫–æ–≤
            threads_per_block = self.config.threads_per_block
            blocks_per_grid = (num_positions + threads_per_block - 1) // threads_per_block
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —è–¥—Ä–æ
            self._cuda_search_kernel[blocks_per_grid, threads_per_block](
                d_text, d_pattern, d_result, text_len, pattern_len
            )
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ
            d_result.copy_to_host(result)
            
            return result[0] > 0
            
        except Exception as e:
            print(f"‚ö†Ô∏è CUDA kernel error: {e}")
            return False
    
    @staticmethod
    def _cuda_search_kernel_stub(text, pattern, result, text_len, pattern_len):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è CUDA —è–¥—Ä–∞ –∫–æ–≥–¥–∞ Numba –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
        pass


# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º CUDA —è–¥—Ä–æ –µ—Å–ª–∏ Numba –¥–æ—Å—Ç—É–ø–Ω–∞
if USE_NUMBA:
    @cuda.jit
    def _cuda_search_kernel_impl(text, pattern, result, text_len, pattern_len):
        """
        CUDA —è–¥—Ä–æ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
        –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–µ
        """
        pos = cuda.grid(1)
        
        if pos < text_len - pattern_len + 1:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            match = True
            for i in range(pattern_len):
                if text[pos + i] != pattern[i]:
                    match = False
                    break
            
            if match:
                # –ê—Ç–æ–º–∞—Ä–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–π–¥–µ–Ω–æ
                cuda.atomic.add(result, 0, 1)
    
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å—É
    GPUPatternMatcher._cuda_search_kernel = staticmethod(_cuda_search_kernel_impl)
else:
    GPUPatternMatcher._cuda_search_kernel = GPUPatternMatcher._cuda_search_kernel_stub


class HybridSearchEngine:
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ø–æ–∏—Å–∫–∞ CPU+GPU
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    
    def __init__(self, use_gpu: bool = True):
        self.config = GPUSearchConfig(use_gpu=use_gpu)
        self.gpu_matcher = GPUPatternMatcher(self.config)
        self.stats = {
            'gpu_searches': 0,
            'cpu_searches': 0,
            'gpu_hits': 0,
            'cpu_hits': 0
        }
    
    def search_in_file(self, file_path: str, pattern: re.Pattern) -> bool:
        """
        –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ —Ñ–∞–π–ª–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º CPU/GPU
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            pattern: –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex –ø–∞—Ç—Ç–µ—Ä–Ω
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        """
        try:
            file_size = os.path.getsize(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if file_size > 100 * 1024 * 1024:  # > 100 –ú–ë
                return False  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            
            # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            use_gpu = (
                self.config.use_gpu and 
                file_size >= self.config.min_file_size_for_gpu and
                self.gpu_matcher.gpu_available
            )
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
                chunk = f.read(8192)
                if b'\x00' in chunk:
                    return False
                
                # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                if file_size < 1024 * 1024:  # < 1 –ú–ë
                    try:
                        text = chunk if len(chunk) == file_size else f.read()
                        text_str = text.decode('utf-8', errors='ignore')
                        found = bool(pattern.search(text_str))
                        self.stats['cpu_searches'] += 1
                        if found:
                            self.stats['cpu_hits'] += 1
                        return found
                    except:
                        return False
                
                # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º memory map
                f.seek(0)
                with mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as mmapped:
                    data = mmapped.read()
                    
                    if use_gpu:
                        self.stats['gpu_searches'] += 1
                        found = self.gpu_matcher.search_in_text_gpu(data, pattern)
                        if found:
                            self.stats['gpu_hits'] += 1
                        return found
                    else:
                        self.stats['cpu_searches'] += 1
                        try:
                            text_str = data.decode('utf-8', errors='ignore')
                            found = bool(pattern.search(text_str))
                            if found:
                                self.stats['cpu_hits'] += 1
                            return found
                        except:
                            return False
                            
        except (PermissionError, OSError, UnicodeDecodeError, ValueError):
            return False
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GPU/CPU"""
        total = self.stats['gpu_searches'] + self.stats['cpu_searches']
        if total == 0:
            return self.stats
        
        return {
            **self.stats,
            'gpu_percentage': (self.stats['gpu_searches'] / total) * 100,
            'cpu_percentage': (self.stats['cpu_searches'] / total) * 100,
            'gpu_hit_rate': (self.stats['gpu_hits'] / max(1, self.stats['gpu_searches'])) * 100,
            'cpu_hit_rate': (self.stats['cpu_hits'] / max(1, self.stats['cpu_searches'])) * 100,
        }
    
    def print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = self.get_stats()
        print("\n" + "="*60)
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ CPU/GPU")
        print("="*60)
        print(f"GPU –ø–æ–∏—Å–∫–æ–≤: {stats['gpu_searches']} ({stats.get('gpu_percentage', 0):.1f}%)")
        print(f"CPU –ø–æ–∏—Å–∫–æ–≤: {stats['cpu_searches']} ({stats.get('cpu_percentage', 0):.1f}%)")
        print(f"GPU —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {stats['gpu_hits']} (hit rate: {stats.get('gpu_hit_rate', 0):.1f}%)")
        print(f"CPU —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {stats['cpu_hits']} (hit rate: {stats.get('cpu_hit_rate', 0):.1f}%)")
        print("="*60)


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU Search Engine")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = HybridSearchEngine(use_gpu=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    test_patterns = [
        (r"test", "–õ–∏—Ç–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"),
        (r"hello|world", "–ü—Ä–æ—Å—Ç–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"),
        (r"\d{3}-\d{3}", "–¶–∏—Ñ—Ä—ã"),
        (r"(?=complex)", "–°–ª–æ–∂–Ω—ã–π lookahead"),
    ]
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU-friendly –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:")
    for pattern, desc in test_patterns:
        is_friendly = engine.gpu_matcher.is_pattern_gpu_friendly(pattern)
        emoji = "‚úÖ" if is_friendly else "‚ùå"
        print(f"{emoji} {desc}: {pattern} - {'GPU' if is_friendly else 'CPU'}")
    
    print("\n‚ú® GPU Search Engine –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    if GPU_AVAILABLE:
        print(f"üöÄ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –í–ö–õ–Æ–ß–ï–ù–û")
        print(f"   –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: {'CuPy ' if USE_CUPY else ''}{'Numba CUDA' if USE_NUMBA else ''}")
    else:
        print("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

